{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> \u2192 Docs </p>"},{"location":"#home","title":"Home","text":""},{"location":"post-001/","title":"EM has finally arrived \u2013 now what\u2009???","text":"<p>While the effort spent to design and develop EM has literally spanned decades, the real journey has only just begun:\u00a0\u00a0 promoting, sustaining, and evolving\u2009 an open-source implementation of the language and its runtime for use by the broader embedded systems community.</p>"},{"location":"post-001/#slowly-opening-the-doors","title":"Slowly opening the doors","text":"<p>You have no idea how much \"stuff\" has accumulated in the EM software {\u2009basement\u2009|\u2009attic\u2009|\u2009garage\u2009} since the language's initial debut back in 2010:</p> <p>distros for almost two dozen MCUs, ranging from the 8-bit AVR ATmega168 used in early Arduino boards [2010] to several open-source RISC-V RV32ICM designs targeting FPGA hardware [2023]</p> <p>a highly-configurable multi-tasking kernel implementing a wide range of scheduling policies \u2013 priortized preemption, blocking semaphores, run-to-completion, and so forth</p> <p>mini device-drivers for every imaginable sort of I2C-based sensor (\u2009temperature, vibration, motion, light, etc\u2009), plus a FLASH file-system optimized for real-time data-logging</p> <p>wireless communication stacks targeting 2.4\u2009GHz and 868\u2009MHz\u2009/\u2009915\u2009MHz radios using customized as well as standardized (BLE, Wifi) protocols, with support for over-the-air firmware update</p> <p>and that's just the tip of the iceberg\u2009!!!</p> <p>If not already obvious, we don't want to simply leave this \"stuff\" by the street with a sign advertising free software.\u00a0 Rather, we wish to open the door to EM rather gently \u2013 allowing the community to digest this (novel) language and runtime at a more measured pace.</p> <p>To that end, we'll continually apply the \"less is more\"\u2009 principle within the current EM-SDK release train.(1)\u00a0  Supporting just one MCU (for now\u2009!!)(2), we've also elected to limit the content bundled with these initial releases to only the most rudimentary EM runtime elements.</p> <ol> <li> <p><code>24.0.x</code>\u2002[\u2009beta\u2009]\u2002 available now<code>24.1.0</code>\u2002[\u2009stable\u2009]\u2002available Jan-24</p> </li> <li> <p>TI CC2340R5</p> </li> </ol> <p>These constraints, in fact, have enabled to us to better focus on EM itself \u2013 introducing the language and its runtime with a 10,000' technical overview followed by live, on-the-ground tours of curated programming examples.</p> <p>Though rudimentary in design, these examples already hint at EM's uncanny ability to reduce program size when benchmarked against C\u2009/\u00a0C++.\u00a0 The SDK also contains state and energy traces for these examples \u2013 captured in real-time using popular logic and power analyzers.</p> <p>And while we've (obviously) grown fond of EM and would surely attest to its positive impact on software productivity, EM's promise of higher-level programming and\u2009 higher-levels of per\u00adformance ultimately comes down to simple software metrics \u2013 size, speed, and\u2009 energy.</p> <p>Stay engaged at blog.openen.org\u2009:\u00a0\u00a0 Upcoming posts will have more to say about the EM language in general, while soliciting your input on \"now what\"\u00a0for the EM-SDK\u2009.</p>"},{"location":"post-001/#what-can-you-do-to-help","title":"What can you do to help","text":"<p>read a little more about EM, including its origin story found here</p> <p>create a personal account at GitHub, if you don't already have one</p> <p>ask a question, voice a concern, or share a thought in our discussion forum</p> <p>Happy coding\u2009!!! \u2002  </p>"},{"location":"post-002/","title":"Choosing the next EM\u2009\u2022\u2009MCU target hardware","text":"<p>EM offers up a \"write once, run anywhere...\" value proposition which enables embedded developers to (easily) migrate code from one MCU to the next.\u00a0 But embedded software portability ultimately depends upon porting the EM software \u2013 hence we need MCU\u2009#2, MCU\u2009#3, ....</p>"},{"location":"post-002/#general-mcu-requirements","title":"General MCU requirements","text":"<p>In theory, the EM language and runtime can target any\u2009 MCU supported by a C\u2009/\u2009C++ com\u00adpiler.\u00a0  In practice, however, we'll generally consider other factors when choosing MCU hardware:</p> <p>availability of relatively inexpensive MCU development board(s) in the marketplace</p> <p>the more \"modest\" the MCU, the better \u2013 simple CPU, limited memory, basic peripherals</p> <p>recent MCU with an active developer community \u2013 like Arduino Diecimilla,\u2009 but not retired</p>"},{"location":"post-002/#mcu-target-1-ti-cc2340","title":"MCU target #1 \u2013 TI CC2340","text":"<p>With many of today's MCUs meeting these requirements (and with several EM distros for them already in the BAG(1)), why did we chose the TI CC2340 for our public debut of EM\u2009???</p> <ol> <li>{ Basement | Attic | Garage }</li> </ol> <p>When first announced by Texas Instruments back in 2022\u2009, the CC2340 wireless MCU immediately caught our attention \u2013 because the device did not\u2009 represent the next node in a silicon roadmap featuring a higher-performance CPU core with significantly more memory.</p> <p>Rather than pushing the technology \"up and to the right\" (as silicon vendors tend to do), TI has positioned the CC2340 as a low-cost, entry-level wireless MCU \u2013 and has conse\u00adquently downsized its CPU, trimmed its Flash\u2009/\u2009SRAM, and streamlined its 2.4\u2009GHz radio.</p> <p>Compared with its predecessors and competitors alike, we applaud this \"less is more\" approach to MCU architecture \u2013 which also resonates with the overall objectives of EM.</p> Full Disclosure\u2009... <p>I co-founded a company (Spectron) in 1987, which Texas Instruments would eventually acquire in 1998.\u00a0  Elected TI Fellow in 2000 after broad adoption of our DSP/BIOS product, I then co-created the real-time software components\u2009 [RTSC]\u2009 technology \u2013 open-sourced in 2007 through the Eclipse Foundation.</p> <p>After retiring from TI in 2009, I morphed the RTSC technology into the initial version of EM \u2013 first used by students at UC Santa Barbara in 2010, and then used to implement Bluetooth Low Energy [BLE] applications within another company (Emmoco) which I also co-founded.</p> <p>An early player in the BLE market, Emmoco primarily relied on wireless MCUs from TI \u2013 starting with the CC25xx family (8-bit 8051 CPU) and later moving to the CC26x0 (32-bit Cortex-M3 CPU).\u00a0  Acquired at the end of 2015 by Shelfbucks\u2009, wireless MCU support broadened to include the CC13x0 family and its sub-GHz radio.</p> <p>From a software perspective, we've actively maintained EM distros for a number of TI CC13xx\u2009/\u2009CC26xx devices.  Besides writing a highly-optimized sub-GHz communication stack completely in EM, we also discovered EM's value in optimizing TI's own BLE stack \u2013 triming memory to 30\u2009KB and reducing power up to 40%.</p> <p>Despite a long history working with(in) Texas Instruments, I received no \"insider info\" about the CC2340 ahead of its general release in mid-2023; and other than a few technical questions posted on the TI Forum, I received no \"back door\" support while coding its EM distro earlier this year.\u00a0  But I do\u2009 like this device \u2013 and so does EM\u2009!!!</p>"},{"location":"post-002/#factors-for-mcu-2-3","title":"Factors for MCU #2, #3, ...","text":"<p>Returning to the matter at hand \u2013 identifying the next MCU(s) which EM will target.\u00a0 Looking to complement our choice of the TI CC2340 as MCU\u2009#1, further considerations we'd like to address with MCU\u2009#2, MCU\u2009#3,  and beyond include the following:</p> \u2002sourced from a silicon vendor other than TI  reinforces a key value proposition of EM \u2002features a CPU comparable to Cortex-M0+  probably a 32-bit Arm or RISC-V core \u2002promoted as an \"ultra-low-power\" device  increases the value of EM's energy benchmarks \u2002supports a popular RTOS such as Zephyr  further opportunities to highlight EM's performance \u2002optionally includes a radio transceiver  as we do\u2009 plan to release EM-based comm stacks <p>Porting EM\u2009 (scheduled for completion in 1Q24) will take a deep-dive into the TI CC2340 distro \u2013 using our MCU\u2009#1 as an examplar to start the train moving on to stations MCU\u2009#2, MCU\u2009#3,  and all points beyond.(1)\u00a0 Track our progress in future posts at blog.openen.org.</p> <ol> <li>Engineers wishing to \"hop on board\" and port to an MCU of their choice should find us on GitHub.</li> </ol>"},{"location":"post-002/#what-can-you-do-to-help","title":"What can you do to help","text":"<p>review the Tiny code \u2192 Tiny chips material found here\u00a0 within the EM platform documentation</p> <p>read up on the TI CC2340R5 device, to appreciate why this particular MCU caught our attention</p> <p>voice your opinion about which MCU(s) we should tackle next in the EM SDK discussion forum</p> <p>Happy coding\u2009!!! \u2002  </p>"},{"location":"archive/2023/","title":"2023","text":""}]}