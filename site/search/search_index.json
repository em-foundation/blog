{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> \u2192 Docs </p>"},{"location":"#home","title":"Home","text":""},{"location":"post-001/","title":"EM has finally arrived \u2013 now what\u2009???","text":"<p>While the effort spent to design and develop EM has literally spanned decades, the real journey has only just begun:\u00a0\u00a0 promoting, sustaining, and evolving\u2009 an open-source implementation of the language and its runtime for use by the broader embedded systems community.</p> <p>\u21b7</p> <p></p>"},{"location":"post-001/#slowly-opening-the-doors","title":"Slowly opening the doors","text":"<p>You have no idea how much \"stuff\" has accumulated in the EM software {\u2009basement\u2009|\u2009attic\u2009|\u2009garage\u2009} since the language's initial debut back in 2010:</p> <p>distros for almost two dozen MCUs, ranging from the 8-bit AVR ATmega168 used in early Arduino boards [2010] to several open-source RISC-V RV32ICM designs targeting FPGA hardware [2023]</p> <p>a highly-configurable multi-tasking kernel implementing a wide range of scheduling policies \u2013 priortized preemption, blocking semaphores, run-to-completion, and so forth</p> <p>mini device-drivers for every imaginable sort of I2C-based sensor (\u2009temperature, vibration, motion, light, etc\u2009), plus a FLASH file-system optimized for real-time data-logging</p> <p>wireless communication stacks targeting 2.4\u2009GHz and 868\u2009MHz\u2009/\u2009915\u2009MHz radios using customized as well as standardized (BLE, Wifi) protocols, with support for over-the-air firmware update</p> <p>and that's just the tip of the iceberg\u2009!!!</p> <p>If not already obvious, we don't want to simply leave this \"stuff\" by the street with a sign advertising free software.\u00a0 Rather, we wish to open the door to EM rather gently \u2013 allowing the community to digest this (novel) language and runtime at a more measured pace.</p> <p>To that end, we'll continually apply the \"less is more\"\u2009 principle within the current EM-SDK release train.(1)\u00a0  Supporting just one MCU (for now\u2009!!)(2), we've also elected to limit the content bundled with these initial releases to only the most rudimentary EM runtime elements.</p> <ol> <li> <p><code>24.0.x</code>\u2002[\u2009beta\u2009]\u2002 available now<code>24.1.0</code>\u2002[\u2009stable\u2009]\u2002available Jan-24</p> </li> <li> <p>TI CC2340R5</p> </li> </ol> <p>These constraints, in fact, have enabled to us to better focus on EM itself \u2013 introducing the language and its runtime with a 10,000' technical overview followed by live, on-the-ground tours of curated programming examples.</p> <p>Though rudimentary in design, these examples already hint at EM's uncanny ability to reduce program size when benchmarked against C/C++\u2009.\u00a0 The SDK also contains state and energy traces for these examples \u2013 captured in real-time using popular logic and power analyzers.</p> <p>And while we've (obviously) grown fond of EM and would surely attest to its positive impact on software productivity, EM's promise of higher-level programming and\u2009 higher-levels of per\u00adformance ultimately comes down to simple software metrics \u2013 size, speed, and\u2009 energy.</p> <p>Stay engaged at blog.openen.org\u2009:\u00a0\u00a0 Upcoming posts will have more to say about the EM language in general, while soliciting your input on \"now what\"\u00a0for the EM-SDK\u2009.</p>"},{"location":"post-001/#what-can-you-do-to-help","title":"What can you do to help","text":"<p>read a little more about EM, including its origin story found here</p> <p>create a personal account at GitHub, if you don't already have one</p> <p>ask a question, voice a concern, or share a thought in our discussion forum</p> <p>Happy coding\u2009!!! \u2002  </p>"},{"location":"post-002/","title":"Choosing the next EM\u2009\u2022\u2009MCU target hardware","text":"<p>EM offers up a \"write once, run anywhere...\" value proposition which enables embedded developers to (easily) migrate code from one MCU to the next.\u00a0 But embedded software portability ultimately depends upon porting the EM software \u2013 hence we need MCU\u2009#2, MCU\u2009#3, ....</p> <p>\u21b6 \u21b7</p>"},{"location":"post-002/#general-mcu-requirements","title":"General MCU requirements","text":"<p>In theory, the EM language and runtime can target any\u2009 MCU supported by a C/C++ com\u00adpiler.\u00a0  In practice, however, we'll generally consider other factors when choosing MCU hardware:</p> <p>availability of relatively inexpensive MCU development board(s) in the marketplace</p> <p>the more \"modest\" the MCU, the better \u2013 simple CPU, limited memory, basic peripherals</p> <p>recent MCU with an active developer community \u2013 like Arduino Diecimilla,\u2009 but not retired</p>"},{"location":"post-002/#mcu-target-1-ti-cc2340","title":"MCU target #1 \u2013 TI CC2340","text":"<p>With many of today's MCUs meeting these requirements (and with several EM distros for them already in the BAG(1)), why did we chose the TI CC2340 for our public debut of EM\u2009???</p> <ol> <li>{ Basement | Attic | Garage }</li> </ol> <p>When first announced by Texas Instruments back in 2022\u2009, the CC2340 wireless MCU immediately caught our attention \u2013 because the device did not\u2009 represent the next node in a silicon roadmap featuring a higher-performance CPU core with significantly more memory.</p> <p>Rather than pushing the technology \"up and to the right\" (as silicon vendors tend to do), TI has positioned the CC2340 as a low-cost, entry-level wireless MCU \u2013 and has conse\u00adquently downsized its CPU, trimmed its Flash\u2009/\u2009SRAM, and streamlined its 2.4\u2009GHz radio.</p> <p>Compared with its predecessors and competitors alike, we applaud this \"less is more\" approach to MCU architecture \u2013 which also resonates with the overall objectives of EM.</p> FULL DISCLOSURE \u2013 Prior relationship with TI <p>I co-founded a company (Spectron) in 1987, which Texas Instruments would eventually acquire in 1998.\u00a0  Elected TI Fellow in 2000 after broad adoption of our DSP/BIOS product, I then co-created the real-time software components\u2009 [RTSC]\u2009 technology \u2013 open-sourced in 2007 through the Eclipse Foundation.</p> <p>After retiring from TI in 2009, I morphed the RTSC technology into the initial version of EM \u2013 first used by students at UC Santa Barbara in 2010, and then used to implement Bluetooth Low Energy [BLE] applications within another company (Emmoco) which I also co-founded.</p> <p>An early player in the BLE market, Emmoco primarily relied on wireless MCUs from TI \u2013 starting with the CC25xx family (8-bit 8051 CPU) and later moving to the CC26x0 (32-bit Cortex-M3 CPU).\u00a0  Acquired at the end of 2015 by Shelfbucks\u2009, wireless MCU support broadened to include the CC13x0 family and its sub-GHz radio.</p> <p>From a software perspective, we've actively maintained EM distros for a number of TI CC13xx\u2009/\u2009CC26xx devices.  Besides writing a highly-optimized sub-GHz communication stack completely in EM, we also discovered EM's value in optimizing TI's own BLE stack \u2013 triming memory to 30\u2009KB and reducing power up to 40%.</p> <p>Despite a long history working with(in) Texas Instruments, I received no \"insider info\" about the CC2340 ahead of its general release in mid-2023; and other than a few technical questions posted on the TI Forum, I received no \"back door\" support while coding its EM distro earlier this year.\u00a0  But I do\u2009 like this device \u2013 and so does EM\u2009!!!</p>"},{"location":"post-002/#factors-for-mcu-2-3","title":"Factors for MCU #2, #3, ...","text":"<p>Returning to the matter at hand \u2013 identifying the next MCU(s) which EM will target.\u00a0 Looking to complement our choice of the TI CC2340 as MCU\u2009#1, further considerations we'd like to address with MCU\u2009#2, MCU\u2009#3,  and beyond include the following:</p> \u2002sourced from a silicon vendor other than TI  reinforces a key value proposition of EM \u2002features a CPU comparable to Cortex-M0+  probably a 32-bit Arm or RISC-V core \u2002promoted as an \"ultra-low-power\" device  increases the value of EM's energy benchmarks \u2002supports a popular RTOS such as Zephyr  further opportunities to highlight EM's performance \u2002optionally includes a radio transceiver  as we do\u2009 plan to release EM-based comm stacks <p>Porting EM\u2009 (scheduled for completion in 1Q24) will take a deep-dive into the TI CC2340 distro \u2013 using our MCU\u2009#1 as an examplar to start the train moving on to stations MCU\u2009#2, MCU\u2009#3,  and all points beyond.(1)\u00a0 Track our progress in future posts at blog.openen.org.</p> <ol> <li>Engineers wishing to \"hop on board\" and port to an MCU of their choice should find us on GitHub.</li> </ol>"},{"location":"post-002/#what-can-you-do-to-help","title":"What can you do to help","text":"<p>review the Tiny code \u2192 Tiny chips material found here\u00a0 within the EM platform documentation</p> <p>read up on the TI CC2340R5 device, to appreciate why this particular MCU caught our attention</p> <p>voice your opinion about which MCU(s) we should tackle next in the EM SDK discussion forum</p> <p>Happy coding\u2009!!! \u2002  </p>"},{"location":"post-003/","title":"Benchmark[et]ing ultra-low-power with EM","text":"<p>Vendor data sheets might specify that an ultra-low-power MCU draws (say) 700\u2009nA @\u20093\u2009V when in its \"deep-sleep\" mode.\u00a0 Very nice \u2013 but until we factor in our application workload, we have no way to truly assess the impact of these MCU specs on overall energy efficiency.</p> <p>\u21b6 \u21b7</p> <p></p>"},{"location":"post-003/#the-impact-of-software","title":"The impact of software","text":"<p>Unless our MCU stays completely inert \u2013 in \"shutdown\" mode, awaiting reset \u2013 embedded application software has undue influence over the system's total power consumption.</p> <p>Targeting the most resource-constrained (ultra-low-power) MCUs, many EM applications will follow a relatively simple, cyclic design pattern:</p>  \u00a0wakeup from deep-sleep mode  \u00a0acquire data from the environment  \u00a0analyze this data using an algorithm  \u00a0transmit results (wirelessly) to a gateway  \u00a0re-enter (low-power) deep-sleep mode <p>With application requirements dictating active duty-cycles ranging from once-per-second down to once-per-day, minimizing elapsed time between steps  through  would surely lower total power consumption \u2013 by re-entering \"deep-sleep\" that much sooner.</p> <p>In practice, steps  and  involve MCU peripherals performing I/O operations at application-defined data-rates \u2013 an ADC sampling at 15\u2009kHz, a radio transmitting at 1\u2009Mbps, etc.\u2009  With little to do while awaiting I/O completion, software often idles within a \"lite-sleep\" mode.</p> <p>Typical MCU power specs</p> <p>MCU lite-sleep mode typically consumes under 1\u2009mW of power and enables interrupt response times of less than 1\u2009\u03bc\u2009.\u00a0  But while the CPU idles, other peripherals such as the radio could remain active \u2013 in fact drawing more\u2009 power than the CPU would alone.</p> <p>By constract, MCU deep-sleep mode might consume well under 10\u2009\u03bcW of power \u2013 but wakeup times could stretch to 100s of \u03bcs\u2009.\u2009  While any active peripheral can awaken the CPU when idling, \"deep-sleep\" mode only powers a limited set of MCU elements (GPIOs, RTCs) which can trigger wakeup interrupts.</p> <p>Finally, MCU active mode \u2013 when the CPU fetches and executes instructions \u2013 will typically draw power at levels expressed as \u03bcW\u2009/\u2009Mhz\u2009.\u00a0  Standard industry metrics like EEMBC CoreMark\u00ae\u2009 help normalize performance claims by individual MCU vendors; a port of this popular benchmark to the EM platform has already begun.(1)</p> <ol> <li>Stay tuned for more information in 1Q24.</li> </ol> <p>Once the MCU returns to its \"active\" mode \u2013 and the application finally does some useful work \u2013 the impact of software on total power consumption boils down to the number\u2009 of instructions the CPU must fetch and execute.\u00a0 But how can we best quantify this impact\u2009???</p>"},{"location":"post-003/#energy-j-not-power-w","title":"Energy (<code>J</code>) \u2013 not power (<code>W</code>)","text":"<p>As software practitioners, we need to measure joules and not watts.\u2009 Only by focusing on total power consumption over a period of time can we begin to appreciate the oversized\u00a0  impact our code can have on overall energy efficiency.</p> <p>To illustrate, let's consider a basic BLE beacon application that advertises packets once-per-second \u2013 following the simple cyclic design-pattern outlined earlier.\u00a0  To make matters more interesting, we'll compare two different\u2009 BLE stacks otherwise running on the same\u2009 MCU:\u2009(1)</p> <ol> <li>NXP's KW39/38/37\u2009\u2009 long-range BLE MCU</li> </ol> <p>a legacy BLE stack \u2013 written in C and supplied by the MCU vendor</p> <p>a prototype BLE stack \u2013 written entirely in EM and coming available in 2024</p> <p>To begin, let's look at a pair of power profiles which report the amount of energy (\u2009in  \u03bcJ\u2009) each stack consumes within a one-second time window.\u2002  Spoiler alert \u2013 EM wins\u2009!!! (1)</p> <ol> <li>We captured these profiles using a Joulescope JS220\u2009 energy analyzer \u2013 worth 10x its cost, but maybe 10x over budget.</li> </ol> <p></p> Energy per Advertising Cycle  <p>Based on these actual values, the legacy and EM stacks could (in theory\u2009!!) advertise for 1.3 and 3.2 years respectively using a CR2032 coin-cell battery with 220\u2009mAh of charge.\u2009  But why\u2009 does one stack significantly outperform the other\u2009???\u00a0 To answer that question, let's zoom-in:</p> <p></p> Energy per Advertising Event   <p>Inside a BLE advertising event [\u2009wakeup \u2192 prepare \u2192 transmit \u2192 cleanup \u2192 sleep\u2009] the actual packet TX window happens very quickly (~250\u2009ms\u2009).\u00a0 While transmit does draw more power (even with the CPU idling), prepare and cleanup times in fact dominate\u2009 the \u03bcJ result.</p> <p>Focusing on MCU power specs can blind us to the true impact of software on energy efficiency.</p> <p>Performing the same BLE procedures almost twice as fast, the EM stack requires only 27% of the energy consumed by the legacy stack per advertising event.\u00a0  Another consequential factor here \u2013 a 200\u2009K legacy stack versus \u226410\u2009K of EM code executing entirely in fast SRAM\u2009!!!</p> <p>code size does matter \u2009::\u00a0 less code [\u2009KB\u2009] \u2009\u2192\u2009 less energy [\u2009\u03bcJ\u2009]</p> <p>Follow us at blog.openem.org to learn more about EM's ability to boost energy efficiency.</p>"},{"location":"post-003/#what-can-you-do-to-help","title":"What can you do to help","text":"<p>study \u2013 or in the worse case, just skim\u2009!!\u2009 \u2013 this material on Measuring Energy</p> <p>find some (human?) resource to help us migrate to the lower-cost STM32 Power Shield</p> <p>show-and-tell\u2009 the community about your own experience in measuring power consumption</p> <p>Happy coding\u2009!!! \u2002  </p>"},{"location":"post-004/","title":"Learning EM through VS Code","text":"<p>Popular IDEs such as Eclipse and VS Code have elevated \u2009\"support for language X\u2009\"\u2009 to one of their most vital features. To that end, our recently published EM Builder extension \u2013 freely available from the VS Code marketplace \u2013 now brings the EM language into the fold.</p> <p>\u21b6 \u21b7</p> <p></p>"},{"location":"post-004/#em-language-support","title":"EM language support","text":"<p>IDE support for a particular programming language has evolved to include a rather extensive set of tooling capabilities:</p> <p>language-specific file icons and menu items</p> <p>syntax highlighting and bracket matching</p> <p>find symbol references and definitions</p> <p>correction of common programming errors</p> <p>hover help and smart code completions</p> <p>formatting and refactoring source code</p> <p>With support available for virtually every programming language you know \u2013 and several dozens(1)more you never even knew existed \u2013 our EM Builder VS Code extension strives to flatten your learning curve for a new\u2009 language whose \"look-and-feel\" does differ from C\u2009.</p> <ol> <li>actually, hundreds</li> </ol> <p>Help wanted \u2013 EM Builder contributors</p> <p>\u2002knowledge of VS Code internals as well as TypeScript programming [highly desirable]</p> <p>\u2002understanding of programming language translation using transpilers [highly desirable]</p> <p>\u2002willingness to increase your knowledge\u2009/\u2009experience in these general areas [even more\u2009 desirable]</p> <p>Our EM Builder extension currently implements most of the language support features listed above; and we'd grade the extension with a B for efforts to date.\u00a0  To earn an A, however, we can use some additional help in improving smart completion\u2009 and tackling code refactoring\u2009.</p> FULL DISCLOSURE \u2013 Prior experience with Eclipse <p>Back at Texas Instruments, I campaigned (loudly\u2009!!) in my capacity as TI Fellow\u2009 for migrating the company's Code Composer Studio IDE from its legacy implementation atop the Windows SDK to one based upon the Eclipse CDT project (first available in mid-2002).\u00a0  A pillar of the TI eXpressDSP strategy, introducing CCS\u20094.0 (based on Eclipse) in 2005 spearheaded a trend that most MCU vendors would eventually follow.</p> <p>After retiring from TI in 2009 \u2013 and conceiving EM shortly thereafter \u2013 I wrote a very rudimentary Eclipse plugin (in Java) that introduced language support for EM.\u2009  While features like syntax highlighting proved easy to implement, supporting smart completion and code refactoring still remains beyond my grasp; even intermediate features like hover help\u2009 offered challenges.</p> <p>With the Eclipse JDT project and its high-quality support for Java setting the bar rather high, comparable support for EM would require a deep-dive into the JDT and CDT source code.  To move matters along, Emmoco (a company I co-founded in 2011) engaged with John Dallaway \u2013 a contributor to the CDT project in particular, knowledgeable about the Eclipse eco-system in general, and a Chartered IT Professional\u2009 I hold in high regard.</p> <p>By early 2021 (already in my next startup, with Emmoco and its acquiror now gone), a decade of \"bit-rot\" had taken hold in my ~50\u2009K lines of Java \u2013 which encompassed an EM language translator as well as an Eclipse plugin.  With that, I undertook a (long overdue\u2009!!) re-write of the EM translator into TypeScript, as well as developed the first version of the EM Builder extension for VS Code.</p> <p>Now weighing in at ~12\u2009K lines of TypeScript (with most of this code comprising a command-line translator), EM language support has finally assumed a more approachable and manageable status \u2013 though we can always use some help. \u00a0 To understand more about the VS Code origin story (as VS Code\u2009+\u2009TypeScript continues to excite me), listen to this talk by Erich Gamma \u2013 a principal architect of Eclipse who joined Microsoft in 2011.</p>"},{"location":"post-004/#touring-em-source-files","title":"Touring EM source files","text":"<p>Having covered the status of EM language support within VS Code, let's pivot to a novel feature of EM Builder specifically crafted to streamline mastery of a new codebase \u2013 a feature heavily exploited in our Using EM\u2009 document.</p> <p>Afrer installing EM Builder on your host PC, language immersion begins with guided tours\u2009 of a curated series of examples that illustrate core components of the EM runtime.  The following slides depict the first EM TOUR in this series \u2013 a \"tour about tours\", so to speak.</p> <p></p> Starting EM TOUR  <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> Viewing EM TOUR GUIDE  <p>Besides helping bring the language and its runtime to life, the implementation\u2009 of the EM TOUR GUIDE panel depicted above (in just a few hundred lines of TypeScript) attests to the robustness and flexibility of the VS Code environment. </p>"},{"location":"post-004/#what-can-you-do-to-help","title":"What can you do to help","text":"<p>read more in Using EM\u2009 about the language support features available with EM Builder</p> <p>share your thoughts\u2009 on using \"VS Code vs Eclipse vs ???\" for embedded development</p> <p>message us if you have specific interest in contributing to the implementation of EM Builder</p> <p>Happy coding\u2009!!! \u2002  </p>"},{"location":"archive/2024/","title":"2024","text":""},{"location":"archive/2023/","title":"2023","text":""}]}